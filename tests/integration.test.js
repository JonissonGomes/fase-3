const axios = require('axios');

// Configura√ß√µes
const BASE_URLS = {
  auth: 'http://localhost:3001',
  vehicles: 'http://localhost:3002',
  orders: 'http://localhost:3003'
};

// Dados de teste
const TEST_USERS = {
  admin: {
    email: 'admin@revenda.com',
    senha: 'admin123'
  },
  vendedor: {
    email: 'vendedor@revenda.com',
    senha: 'vendedor123'
  },
  cliente: {
    email: 'cliente@revenda.com',
    senha: 'cliente123'
  }
};

let tokens = {};
let testVehicleId = null;
let testOrderId = null;

// Fun√ß√£o para fazer login
async function login(userType) {
  try {
    const response = await axios.post(`${BASE_URLS.auth}/auth/login`, TEST_USERS[userType]);
    tokens[userType] = response.data.token;
    console.log(`‚úÖ Login ${userType} realizado com sucesso`);
    return response.data.token;
  } catch (error) {
    console.error(`‚ùå Erro no login ${userType}:`, error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para criar ve√≠culo
async function createVehicle() {
  try {
    const vehicleData = {
      marca: 'Toyota',
      modelo: 'Corolla',
      ano: 2020,
      cor: 'Prata',
      preco: 85000,
      descricao: 'Ve√≠culo em excelente estado',
      quilometragem: 45000,
      combustivel: 'Flex',
      transmissao: 'Autom√°tico'
    };

    const response = await axios.post(`${BASE_URLS.vehicles}/vehicles`, vehicleData, {
      headers: { Authorization: `Bearer ${tokens.vendedor}` }
    });

    testVehicleId = response.data.veiculo._id;
    console.log(`‚úÖ Ve√≠culo criado com sucesso: ${testVehicleId}`);
    return response.data.veiculo;
  } catch (error) {
    console.error('‚ùå Erro ao criar ve√≠culo:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para listar ve√≠culos
async function listVehicles() {
  try {
    const response = await axios.get(`${BASE_URLS.vehicles}/vehicles`);
    console.log(`‚úÖ Ve√≠culos listados: ${response.data.veiculos.length} encontrados`);
    return response.data.veiculos;
  } catch (error) {
    console.error('‚ùå Erro ao listar ve√≠culos:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para criar pedido
async function createOrder() {
  try {
    const orderData = {
      veiculoId: testVehicleId,
      precoFinal: 85000,
      observacoes: 'Interessado em financiamento',
      metodoPagamento: 'cartao_credito',
      parcelas: 12,
      valorParcela: 7083.33
    };

    const response = await axios.post(`${BASE_URLS.orders}/orders`, orderData, {
      headers: { Authorization: `Bearer ${tokens.cliente}` }
    });

    testOrderId = response.data.pedido._id;
    console.log(`‚úÖ Pedido criado com sucesso: ${testOrderId}`);
    return response.data.pedido;
  } catch (error) {
    console.error('‚ùå Erro ao criar pedido:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para aprovar pedido
async function approveOrder() {
  try {
    const response = await axios.put(`${BASE_URLS.orders}/orders/${testOrderId}/approve`, {}, {
      headers: { Authorization: `Bearer ${tokens.vendedor}` }
    });
    console.log(`‚úÖ Pedido aprovado com sucesso`);
    return response.data.pedido;
  } catch (error) {
    console.error('‚ùå Erro ao aprovar pedido:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para listar pedidos
async function listOrders() {
  try {
    const response = await axios.get(`${BASE_URLS.orders}/orders`, {
      headers: { Authorization: `Bearer ${tokens.cliente}` }
    });
    console.log(`‚úÖ Pedidos listados: ${response.data.pedidos.length} encontrados`);
    return response.data.pedidos;
  } catch (error) {
    console.error('‚ùå Erro ao listar pedidos:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para verificar health dos servi√ßos
async function checkHealth() {
  try {
    const services = ['auth', 'vehicles', 'orders'];
    
    for (const service of services) {
      const response = await axios.get(`${BASE_URLS[service]}/health`);
      console.log(`‚úÖ ${service}-service: ${response.data.status}`);
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar health:', error.message);
  }
}

// Teste principal
async function runIntegrationTest() {
  console.log('üöÄ Iniciando testes de integra√ß√£o...\n');

  try {
    // 1. Verificar health dos servi√ßos
    console.log('1. Verificando health dos servi√ßos...');
    await checkHealth();
    console.log('');

    // 2. Login dos usu√°rios
    console.log('2. Realizando login dos usu√°rios...');
    await login('admin');
    await login('vendedor');
    await login('cliente');
    console.log('');

    // 3. Listar ve√≠culos existentes
    console.log('3. Listando ve√≠culos existentes...');
    await listVehicles();
    console.log('');

    // 4. Criar ve√≠culo
    console.log('4. Criando ve√≠culo...');
    await createVehicle();
    console.log('');

    // 5. Listar ve√≠culos novamente
    console.log('5. Listando ve√≠culos ap√≥s cria√ß√£o...');
    await listVehicles();
    console.log('');

    // 6. Criar pedido
    console.log('6. Criando pedido...');
    await createOrder();
    console.log('');

    // 7. Listar pedidos do cliente
    console.log('7. Listando pedidos do cliente...');
    await listOrders();
    console.log('');

    // 8. Aprovar pedido
    console.log('8. Aprovando pedido...');
    await approveOrder();
    console.log('');

    // 9. Listar pedidos novamente
    console.log('9. Listando pedidos ap√≥s aprova√ß√£o...');
    await listOrders();
    console.log('');

    console.log('üéâ Todos os testes de integra√ß√£o passaram com sucesso!');

  } catch (error) {
    console.error('üí• Erro durante os testes:', error.message);
    process.exit(1);
  }
}

// Executar testes se o arquivo for chamado diretamente
if (require.main === module) {
  runIntegrationTest();
}

module.exports = {
  runIntegrationTest,
  login,
  createVehicle,
  listVehicles,
  createOrder,
  approveOrder,
  listOrders,
  checkHealth
}; 