#!/bin/bash

# Script para verificar status dos servi√ßos no Render
# Uso: ./scripts/check-render-status.sh

set -e

echo "üîç Verificando status dos servi√ßos no Render..."

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

# URLs dos servi√ßos
AUTH_URL="https://fase-3-auth-service.onrender.com"
VEHICLES_URL="https://fase-3-vehicles-service.onrender.com"
ORDERS_URL="https://fase-3-orders-service.onrender.com"

log "üì° Testando conectividade b√°sica..."

# Testar se os dom√≠nios resolvem
log "üîç Testando resolu√ß√£o DNS..."
for url in "$AUTH_URL" "$VEHICLES_URL" "$ORDERS_URL"; do
    domain=$(echo "$url" | sed 's|https://||')
    if nslookup "$domain" >/dev/null 2>&1; then
        log "‚úÖ DNS resolvido para $domain"
    else
        error "‚ùå DNS n√£o resolve para $domain"
    fi
done

log "üåê Testando conectividade HTTP..."

# Testar conectividade HTTP
for url in "$AUTH_URL" "$VEHICLES_URL" "$ORDERS_URL"; do
    log "üì° Testando $url..."
    
    # Testar se o servidor responde
    if curl -s -o /dev/null -w "%{http_code}" "$url" >/dev/null 2>&1; then
        log "‚úÖ Servidor responde em $url"
        
        # Verificar headers espec√≠ficos
        headers=$(curl -s -I "$url" 2>/dev/null)
        
        if echo "$headers" | grep -q "x-render-routing: no-server"; then
            warn "‚ö†Ô∏è  Render n√£o est√° roteando para o servi√ßo em $url"
        fi
        
        if echo "$headers" | grep -q "server: cloudflare"; then
            log "‚úÖ Cloudflare ativo em $url"
        fi
        
    else
        error "‚ùå Servidor n√£o responde em $url"
    fi
done

log "üß™ Testando rotas espec√≠ficas..."

# Testar rotas espec√≠ficas
log "üîê Testando Auth Service..."
auth_response=$(curl -s -w "%{http_code}" "$AUTH_URL/auth/register" 2>/dev/null || echo "000")
if [ "$auth_response" = "404" ]; then
    warn "‚ö†Ô∏è  Rota /auth/register retorna 404"
elif [ "$auth_response" = "000" ]; then
    error "‚ùå N√£o foi poss√≠vel conectar ao Auth Service"
else
    log "‚úÖ Auth Service responde com c√≥digo $auth_response"
fi

log "üöó Testando Vehicles Service..."
vehicles_response=$(curl -s -w "%{http_code}" "$VEHICLES_URL/vehicles" 2>/dev/null || echo "000")
if [ "$vehicles_response" = "404" ]; then
    warn "‚ö†Ô∏è  Rota /vehicles retorna 404"
elif [ "$vehicles_response" = "000" ]; then
    error "‚ùå N√£o foi poss√≠vel conectar ao Vehicles Service"
else
    log "‚úÖ Vehicles Service responde com c√≥digo $vehicles_response"
fi

log "üì¶ Testando Orders Service..."
orders_response=$(curl -s -w "%{http_code}" "$ORDERS_URL/orders" 2>/dev/null || echo "000")
if [ "$orders_response" = "404" ]; then
    warn "‚ö†Ô∏è  Rota /orders retorna 404"
elif [ "$orders_response" = "000" ]; then
    error "‚ùå N√£o foi poss√≠vel conectar ao Orders Service"
else
    log "‚úÖ Orders Service responde com c√≥digo $orders_response"
fi

log "üìã Resumo do diagn√≥stico:"
echo ""
echo "üîç Poss√≠veis causas do problema:"
echo "   1. Servi√ßos n√£o est√£o rodando no Render"
echo "   2. Deploy n√£o foi bem-sucedido"
echo "   3. Configura√ß√£o incorreta no Render"
echo "   4. Problema de roteamento do Render"
echo ""
echo "üõ†Ô∏è  Pr√≥ximos passos:"
echo "   1. Acesse: https://dashboard.render.com"
echo "   2. Verifique o status dos servi√ßos"
echo "   3. Verifique os logs de deploy"
echo "   4. Force um novo deploy se necess√°rio"
echo ""
echo "üìä URLs para verificar:"
echo "   Auth: $AUTH_URL"
echo "   Vehicles: $VEHICLES_URL"
echo "   Orders: $ORDERS_URL" 