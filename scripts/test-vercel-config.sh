#!/bin/bash

# Script para testar configura√ß√£o do Vercel
# Uso: ./scripts/test-vercel-config.sh

set -e

echo "üß™ Testando configura√ß√£o do Vercel..."

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

# Verificar se estamos no diret√≥rio raiz
if [ ! -f "vercel.json" ]; then
    error "Execute este script na raiz do projeto (onde est√° o vercel.json)"
    exit 1
fi

log "üìã Verificando arquivos de configura√ß√£o..."

# Verificar vercel.json
if [ ! -f "vercel.json" ]; then
    error "vercel.json n√£o encontrado"
    exit 1
fi

# Verificar se tem se√ß√£o functions (que causa erro)
if grep -q '"functions"' vercel.json; then
    error "vercel.json cont√©m se√ß√£o 'functions' que causa erro em projetos SPA"
    warn "Remova a se√ß√£o 'functions' do vercel.json"
    exit 1
fi

log "‚úÖ vercel.json est√° correto"

# Verificar .vercelignore
if [ ! -f ".vercelignore" ]; then
    warn ".vercelignore n√£o encontrado"
else
    log "‚úÖ .vercelignore encontrado"
fi

# Verificar frontend
if [ ! -d "frontend" ]; then
    error "Diret√≥rio frontend n√£o encontrado"
    exit 1
fi

log "‚úÖ Diret√≥rio frontend encontrado"

# Verificar package.json do frontend
if [ ! -f "frontend/package.json" ]; then
    error "package.json n√£o encontrado no frontend"
    exit 1
fi

log "‚úÖ package.json do frontend encontrado"

# Verificar vite.config.js
if [ ! -f "frontend/vite.config.js" ]; then
    error "vite.config.js n√£o encontrado no frontend"
    exit 1
fi

log "‚úÖ vite.config.js encontrado"

# Verificar .nvmrc
if [ ! -f "frontend/.nvmrc" ]; then
    warn ".nvmrc n√£o encontrado no frontend"
else
    log "‚úÖ .nvmrc encontrado"
fi

# Verificar engines no package.json
if ! grep -q '"engines"' frontend/package.json; then
    warn "Campo 'engines' n√£o encontrado no package.json do frontend"
else
    log "‚úÖ Campo 'engines' encontrado"
fi

log "üî® Testando build local..."

# Limpar build anterior
rm -rf frontend/dist frontend/node_modules

# Instalar depend√™ncias
cd frontend
npm install

# Fazer build
npm run build

# Verificar se o build foi bem-sucedido
if [ ! -d "dist" ]; then
    error "Build falhou. Diret√≥rio dist n√£o encontrado"
    exit 1
fi

log "‚úÖ Build local bem-sucedido"

# Verificar arquivos gerados
if [ ! -f "dist/index.html" ]; then
    error "index.html n√£o encontrado no build"
    exit 1
fi

if [ ! -d "dist/assets" ]; then
    error "Diret√≥rio assets n√£o encontrado no build"
    exit 1
fi

log "‚úÖ Arquivos de build verificados"

# Voltar para a raiz
cd ..

log "üéâ Configura√ß√£o do Vercel est√° correta!"
log "üìã Pr√≥ximos passos:"
echo "   1. Fa√ßa commit das altera√ß√µes"
echo "   2. Push para o reposit√≥rio"
echo "   3. O deploy na Vercel ser√° autom√°tico"
echo ""
echo "üîó Ou execute deploy manual:"
echo "   make vercel-deploy" 